/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.validerActes;

import fc.DialogueBD;
import fc.Utilisateur;
import java.sql.ResultSet;

/**
 *
 * @author emmaa
 */
public class ValiderConsultation extends javax.swing.JFrame {

    private DialogueBD dialogueBD;
    private Utilisateur utilisateur;
    public  String idActe;
    /**
     * Creates new form ValiderConsultation
     */

    public ValiderConsultation(String idActe) {
        initComponents();
        this.dialogueBD = new DialogueBD();
        dialogueBD.connect();
        this.utilisateur = new Utilisateur("Cot", "Harry", true, "Français", 1, 1111, "Y");
        this.idActe = idActe;
        remplirChamps(idActe);
        //Pour basculer l'interface en anglais lorsqu'elle la langue "English" est sélectionnée
        changerLangue(this.utilisateur.getLangue());
    }
    public ValiderConsultation(DialogueBD dialogueBD, Utilisateur utilisateur, String idActe) {
        initComponents();
        this.dialogueBD = dialogueBD;
        this.utilisateur = utilisateur;
        this.idActe = idActe;
        //Pour empêcher le redimensionnement de la fenêtre, on utilise setResizable(false)
        remplirChamps(idActe);
        setResizable(false);
        //Pour basculer l'interface en anglais lorsqu'elle la langue "English" est sélectionnée
        changerLangue(this.utilisateur.getLangue());
    }

    private void remplirChamps(String idActe) {
        //On récupère les informations de la consultation
        String requeteConsultation = "SELECT * FROM Acte WHERE idActe = " + idActe;
        ResultSet resultatConsultation = this.dialogueBD.requete(requeteConsultation);
        try {
            resultatConsultation.next();
            // On remplit les champs avec les informations de la consultation
            nomService.setText(dialogueBD.getNomService(resultatConsultation.getString("idService")));
            nomMedecin.setText(dialogueBD.getNomMedecin(resultatConsultation.getString("idRealisateur")));
            dateConsultation.setText(resultatConsultation.getString("dateRealisationActe").substring(0, 10));
            commentaire.setText(resultatConsultation.getString("commentaire"));

            // On cache le bouton de validation si l'acte a déjà été validé ou si l'utilisateur n'est pas
            boolean sejourOuvert;
            // Récupération de l'état du séjour
            ResultSet resultatSejour = dialogueBD.requete("SELECT ouvert FROM Sejour WHERE idSejour = " + resultatConsultation.getString("idSejour"));
            if (resultatSejour.next()) {
                sejourOuvert = resultatSejour.getString("ouvert").equals("Y");
            } else {
                sejourOuvert = false;
            }
            // le médecin prévu pour la consultation
            boolean valide = resultatConsultation.getString("valide").equals("Y");
            System.out.println(valide);
            if(valide || !resultatConsultation.getString("idRealisateur").equals(utilisateur.getIdUtilisateur()) || !sejourOuvert) {
                boutonValiderConsultation.setVisible(false);
                // On affiche le résultat de la consultation si elle a déjà été validée, sinon on affiche un message
                if(valide) {
                    resultat.setText(resultatConsultation.getString("resultat"));
                    resultat.setEditable(false);
                }else {
                    resultat.setText("La consultation n'a pas encore été effectuée");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        validerLaConsultation = new javax.swing.JLabel();
        serviceLabel = new javax.swing.JLabel();
        nomService = new javax.swing.JLabel();
        medecinLabel = new javax.swing.JLabel();
        nomMedecin = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        dateConsultation = new javax.swing.JLabel();
        resultatLabel = new javax.swing.JLabel();
        zoneCommentaire = new javax.swing.JScrollPane();
        resultat = new javax.swing.JTextArea();
        boutonValiderConsultation = new javax.swing.JButton();
        commentaireLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentaire = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(236, 242, 254));

        validerLaConsultation.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        validerLaConsultation.setText("Valider la consultation");

        serviceLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        serviceLabel.setText("Service : ");

        nomService.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        nomService.setText("nomService");

        medecinLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        medecinLabel.setText("Médecin : ");

        nomMedecin.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        nomMedecin.setText("nomMedecin");

        date.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        date.setText("Date : ");

        dateConsultation.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        dateConsultation.setText("dateConsultation");

        resultatLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        resultatLabel.setText("Résultat");

        resultat.setColumns(20);
        resultat.setRows(5);
        zoneCommentaire.setViewportView(resultat);

        boutonValiderConsultation.setBackground(new java.awt.Color(4, 66, 114));
        boutonValiderConsultation.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        boutonValiderConsultation.setForeground(new java.awt.Color(255, 255, 255));
        boutonValiderConsultation.setText("Valider la consultation");
        boutonValiderConsultation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonValiderConsultationActionPerformed(evt);
            }
        });

        commentaireLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        commentaireLabel.setText("Commentaire");

        commentaire.setColumns(20);
        commentaire.setRows(5);
        jScrollPane1.setViewportView(commentaire);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zoneCommentaire, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(validerLaConsultation)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(serviceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nomService))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(medecinLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nomMedecin))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(date)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateConsultation))
                            .addComponent(resultatLabel)
                            .addComponent(commentaireLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(boutonValiderConsultation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validerLaConsultation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceLabel)
                    .addComponent(nomService))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medecinLabel)
                    .addComponent(nomMedecin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date)
                    .addComponent(dateConsultation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoneCommentaire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(commentaireLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(boutonValiderConsultation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boutonValiderConsultationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonValiderConsultationActionPerformed
        //On récupère le résultat de la consultation
        String resultatConsultation = resultat.getText();
        //On met à jour la consultation dans la base de données
        dialogueBD.validerActe(idActe, resultatConsultation);
        this.dispose();
    }//GEN-LAST:event_boutonValiderConsultationActionPerformed
    
    public void changerLangue(String langue) {
        //Si la langue selectionnée lors la connexion est l'anglais, alors l'interface s'affiche en anglais
        //On remplace chaque composant par son équivalent anglais
        if (langue.equals("English")) {
            validerLaConsultation.setText("Validate the consultation");
            boutonValiderConsultation.setText("Validate");
            serviceLabel.setText("Medical service :");
            medecinLabel.setText("Physician :");
            resultatLabel.setText("Result :");
            commentaireLabel.setText("Comment :");

        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValiderConsultation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValiderConsultation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValiderConsultation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValiderConsultation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ValiderConsultation("7").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonValiderConsultation;
    private javax.swing.JTextArea commentaire;
    private javax.swing.JLabel commentaireLabel;
    private javax.swing.JLabel date;
    private javax.swing.JLabel dateConsultation;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel medecinLabel;
    private javax.swing.JLabel nomMedecin;
    private javax.swing.JLabel nomService;
    private javax.swing.JTextArea resultat;
    private javax.swing.JLabel resultatLabel;
    private javax.swing.JLabel serviceLabel;
    private javax.swing.JLabel validerLaConsultation;
    private javax.swing.JScrollPane zoneCommentaire;
    // End of variables declaration//GEN-END:variables
}
