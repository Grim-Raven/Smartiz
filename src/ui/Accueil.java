/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import fc.AfficherListePatientsListener;
import fc.AfficherListeEtudesListener;
import fc.DialogueBD;
import fc.Utilisateur;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JViewport;

/**
 * Page d'accueil de l'application
 *
 * @author Antoine
 */
public class Accueil extends javax.swing.JFrame implements AfficherListePatientsListener, AfficherListeEtudesListener {

    /**
     * Creates new form Accueil
     */
    //Code couleur : bleu foncé -> 044272
    //Code couleur : bleu clair -> ecf2fe
    private final DialogueBD dialogueBD;
    private final Utilisateur utilisateur;
    private AfficherListePatients scrollPaneTable;
    private javax.swing.JTable tablePatients;
    private javax.swing.JTable tableMedecin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;

    private final ArrayList<AfficherListePatientsListener> patientSelectioneListenerList = new ArrayList<>();

    public Accueil(DialogueBD dialogueBD, Utilisateur utilisateur) {
        initComponents();
        this.dialogueBD = dialogueBD;
        // On affiche le nom de l'utilisateur en Titre de la JFrame
        this.utilisateur = utilisateur;
        this.setTitle("Bienvenue " + utilisateur.getPrenom().trim() + " " + utilisateur.getNom().trim());
        // On met la JFrame en plein écran
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        ImageIcon iconeSmartiz = new ImageIcon(Accueil.class.getResource("/ui/Image/Logo_Smartiz.png"));
        Image imageSmartiz = iconeSmartiz.getImage();
        Image scaledImage = imageSmartiz.getScaledInstance(labelLogo.getWidth(), labelLogo.getHeight(), Image.SCALE_SMOOTH);
        labelLogo.setIcon(new ImageIcon(scaledImage));
        affichageBoutons();
        changerLangue(this.utilisateur.getLangue());
        // Chargez l'image à partir du fichier
        Image icon = Toolkit.getDefaultToolkit().getImage("src/ui/Image/Logo_serpent.png");

        // Définissez l'image comme icône de la fenêtre
        this.setIconImage(icon);
    }

    /**
     * Méthode pour afficher les boutons en fonction du type d'utilisateur
     */
    public void affichageBoutons() {
        if (!utilisateur.isPersonnelMedical()) {
            BoutonMedecins.setVisible(false);
            BoutonRechercheClinique.setVisible(false);
        } else {
            boutonNouveauPatient.setVisible(false);
        }
        this.pack();
    }

    public void changerLangue(String langue) {
        if (langue.equals("English")) {
            BoutonMedecins.setText("Physicians");
            Deconnexion.setText("Disconnection");
            BoutonServices.setText("Medical Services");
            BoutonRechercheClinique.setText("Clinical trial");
            RechercherUnPatient.setText("Search for a patient");
            BoutonRechercher.setText("Search");
            Nom.setText("Last name");
            Prenom.setText("First name");
            DateDeNaissance.setText("Date of birth");
            Bienvenue.setText("Welcome");
            IPP.setText("PPI");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanneauOuest = new javax.swing.JPanel();
        Deconnexion = new javax.swing.JButton();
        panelBoutons = new javax.swing.JPanel();
        BoutonServices = new javax.swing.JButton();
        BoutonMedecins = new javax.swing.JButton();
        BoutonPatients = new javax.swing.JButton();
        BoutonRechercheClinique = new javax.swing.JButton();
        boutonNouveauPatient = new javax.swing.JButton();
        PanneauNord = new javax.swing.JPanel();
        PanneauRecherche = new javax.swing.JPanel();
        RechercherUnPatient = new javax.swing.JLabel();
        texteIPP = new javax.swing.JTextField();
        BoutonRechercher = new javax.swing.JButton();
        IPP = new javax.swing.JLabel();
        Nom = new javax.swing.JLabel();
        texteNom = new javax.swing.JTextField();
        Prenom = new javax.swing.JLabel();
        textePrenom = new javax.swing.JTextField();
        DateDeNaissance = new javax.swing.JLabel();
        texteDateNaissance = new javax.swing.JTextField();
        PanneauLogo = new javax.swing.JPanel();
        labelLogo = new javax.swing.JLabel();
        PanneauPrincipale = new javax.swing.JPanel();
        PanneauPrincipaleNord = new javax.swing.JPanel();
        PanneauPrincipalOuest = new javax.swing.JPanel();
        PanneauPrincipaleEst = new javax.swing.JPanel();
        PanneauPrincipaleSud = new javax.swing.JPanel();
        PanneauPrincipaleCentral = new javax.swing.JPanel();
        Bienvenue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(236, 242, 254));

        PanneauOuest.setBackground(new java.awt.Color(236, 242, 254));

        Deconnexion.setBackground(new java.awt.Color(4, 66, 114));
        Deconnexion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Deconnexion.setForeground(new java.awt.Color(255, 255, 255));
        Deconnexion.setText("Déconnexion");
        Deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeconnexionActionPerformed(evt);
            }
        });

        panelBoutons.setBackground(new java.awt.Color(236, 242, 254));
        panelBoutons.setLayout(new javax.swing.BoxLayout(panelBoutons, javax.swing.BoxLayout.Y_AXIS));

        BoutonServices.setBackground(new java.awt.Color(4, 66, 114));
        BoutonServices.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        BoutonServices.setForeground(new java.awt.Color(255, 255, 255));
        BoutonServices.setText("Services");
        BoutonServices.setMaximumSize(new java.awt.Dimension(217, 35));
        BoutonServices.setMinimumSize(new java.awt.Dimension(217, 25));
        BoutonServices.setPreferredSize(new java.awt.Dimension(217, 35));
        panelBoutons.add(BoutonServices);
        panelBoutons.add(Box.createRigidArea(new Dimension(0, 10))); // 10 est la hauteur de l'espace

        BoutonMedecins.setBackground(new java.awt.Color(4, 66, 114));
        BoutonMedecins.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        BoutonMedecins.setForeground(new java.awt.Color(255, 255, 255));
        BoutonMedecins.setText("Médecins");
        BoutonMedecins.setMaximumSize(new java.awt.Dimension(217, 35));
        BoutonMedecins.setMinimumSize(new java.awt.Dimension(217, 25));
        BoutonMedecins.setPreferredSize(new java.awt.Dimension(217, 35));
	BoutonMedecins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonMedecinsActionPerformed(evt);
            }
        });
        panelBoutons.add(BoutonMedecins);
        panelBoutons.add(Box.createRigidArea(new Dimension(0, 10))); // 10 est la hauteur de l'espace

        BoutonPatients.setBackground(new java.awt.Color(4, 66, 114));
        BoutonPatients.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        BoutonPatients.setForeground(new java.awt.Color(255, 255, 255));
        BoutonPatients.setText("Patients");
        BoutonPatients.setToolTipText("");
        BoutonPatients.setMaximumSize(new java.awt.Dimension(217, 35));
        BoutonPatients.setMinimumSize(new java.awt.Dimension(217, 25));
        BoutonPatients.setPreferredSize(new java.awt.Dimension(217, 35));
        BoutonPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonPatientsActionPerformed(evt);
            }
        });
        panelBoutons.add(BoutonPatients);
        panelBoutons.add(Box.createRigidArea(new Dimension(0, 10))); // 10 est la hauteur de l'espace

        BoutonRechercheClinique.setBackground(new java.awt.Color(4, 66, 114));
        BoutonRechercheClinique.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        BoutonRechercheClinique.setForeground(new java.awt.Color(255, 255, 255));
        BoutonRechercheClinique.setText("Recherche Clinique");
        BoutonRechercheClinique.setMaximumSize(new java.awt.Dimension(217, 35));
        BoutonRechercheClinique.setMinimumSize(new java.awt.Dimension(217, 25));
        BoutonRechercheClinique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRechercheCliniqueActionPerformed(evt);
            }
        });
        panelBoutons.add(BoutonRechercheClinique);
        panelBoutons.add(Box.createRigidArea(new Dimension(0, 10))); // 10 est la hauteur de l'espace

        boutonNouveauPatient.setBackground(new java.awt.Color(4, 66, 114));
        boutonNouveauPatient.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        boutonNouveauPatient.setForeground(new java.awt.Color(255, 255, 255));
        boutonNouveauPatient.setText("Nouveau Patient");
        boutonNouveauPatient.setMaximumSize(new java.awt.Dimension(217, 35));
        boutonNouveauPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonNouveauPatientActionPerformed(evt);
            }
        });
        panelBoutons.add(boutonNouveauPatient);
        panelBoutons.add(Box.createRigidArea(new Dimension(0, 10))); // 10 est la hauteur de l'espace

        javax.swing.GroupLayout PanneauOuestLayout = new javax.swing.GroupLayout(PanneauOuest);
        PanneauOuest.setLayout(PanneauOuestLayout);
        PanneauOuestLayout.setHorizontalGroup(
            PanneauOuestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauOuestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanneauOuestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanneauOuestLayout.createSequentialGroup()
                        .addComponent(panelBoutons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addComponent(Deconnexion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanneauOuestLayout.setVerticalGroup(
            PanneauOuestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanneauOuestLayout.createSequentialGroup()
                .addComponent(panelBoutons, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addGap(50, 50, 50)
                .addComponent(Deconnexion)
                .addContainerGap())
        );

        getContentPane().add(PanneauOuest, java.awt.BorderLayout.WEST);

        PanneauNord.setBackground(new java.awt.Color(255, 255, 255));
        PanneauNord.setLayout(new java.awt.BorderLayout());

        PanneauRecherche.setBackground(new java.awt.Color(236, 242, 254));

        RechercherUnPatient.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        RechercherUnPatient.setText(" Rechercher un patient :");
        RechercherUnPatient.setPreferredSize(new Dimension(400,75));

        texteIPP.setName("idPatient"); // NOI18N

        BoutonRechercher.setBackground(new java.awt.Color(4, 66, 114));
        BoutonRechercher.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        BoutonRechercher.setForeground(new java.awt.Color(255, 255, 255));
        BoutonRechercher.setText("Rechercher");
        BoutonRechercher.setPreferredSize(new java.awt.Dimension(97, 40));
        BoutonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRechercherActionPerformed(evt);
            }
        });

        IPP.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        IPP.setText("IPP");

        Nom.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Nom.setText("Nom ");

        texteNom.setName("nom"); // NOI18N
        texteNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texteNomActionPerformed(evt);
            }
        });

        Prenom.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Prenom.setText("Prénom");

        textePrenom.setName("prenom"); // NOI18N

        DateDeNaissance.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        DateDeNaissance.setText("Date de Naissance");

        texteDateNaissance.setName("dateNaissance"); // NOI18N

        PanneauLogo.setBackground(new java.awt.Color(236, 242, 254));

        labelLogo.setBackground(new java.awt.Color(236, 242, 254));

        javax.swing.GroupLayout PanneauLogoLayout = new javax.swing.GroupLayout(PanneauLogo);
        PanneauLogo.setLayout(PanneauLogoLayout);
        PanneauLogoLayout.setHorizontalGroup(
            PanneauLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauLogoLayout.createSequentialGroup()
                .addComponent(labelLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanneauLogoLayout.setVerticalGroup(
            PanneauLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauLogoLayout.createSequentialGroup()
                .addComponent(labelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PanneauRechercheLayout = new javax.swing.GroupLayout(PanneauRecherche);
        PanneauRecherche.setLayout(PanneauRechercheLayout);
        PanneauRechercheLayout.setHorizontalGroup(
            PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauRechercheLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanneauLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanneauRechercheLayout.createSequentialGroup()
                        .addComponent(DateDeNaissance)
                        .addGap(18, 18, 18)
                        .addComponent(texteDateNaissance))
                    .addGroup(PanneauRechercheLayout.createSequentialGroup()
                        .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanneauRechercheLayout.createSequentialGroup()
                                .addComponent(Nom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(texteNom, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(Prenom))
                            .addGroup(PanneauRechercheLayout.createSequentialGroup()
                                .addComponent(RechercherUnPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(IPP)))
                        .addGap(18, 18, 18)
                        .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(texteIPP, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                            .addComponent(textePrenom))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BoutonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        PanneauRechercheLayout.setVerticalGroup(
            PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauRechercheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanneauRechercheLayout.createSequentialGroup()
                        .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RechercherUnPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(texteIPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BoutonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IPP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textePrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Prenom))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Nom)
                                .addComponent(texteNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanneauRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DateDeNaissance)
                            .addComponent(texteDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(PanneauLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        PanneauNord.add(PanneauRecherche, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanneauNord, java.awt.BorderLayout.NORTH);

        PanneauPrincipale.setBackground(new java.awt.Color(236, 242, 254));
        PanneauPrincipale.setLayout(new java.awt.BorderLayout());

        PanneauPrincipaleNord.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanneauPrincipaleNordLayout = new javax.swing.GroupLayout(PanneauPrincipaleNord);
        PanneauPrincipaleNord.setLayout(PanneauPrincipaleNordLayout);
        PanneauPrincipaleNordLayout.setHorizontalGroup(
            PanneauPrincipaleNordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1182, Short.MAX_VALUE)
        );
        PanneauPrincipaleNordLayout.setVerticalGroup(
            PanneauPrincipaleNordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        PanneauPrincipale.add(PanneauPrincipaleNord, java.awt.BorderLayout.PAGE_START);

        PanneauPrincipalOuest.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanneauPrincipalOuestLayout = new javax.swing.GroupLayout(PanneauPrincipalOuest);
        PanneauPrincipalOuest.setLayout(PanneauPrincipalOuestLayout);
        PanneauPrincipalOuestLayout.setHorizontalGroup(
            PanneauPrincipalOuestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanneauPrincipalOuestLayout.setVerticalGroup(
            PanneauPrincipalOuestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );

        PanneauPrincipale.add(PanneauPrincipalOuest, java.awt.BorderLayout.LINE_START);

        PanneauPrincipaleEst.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanneauPrincipaleEstLayout = new javax.swing.GroupLayout(PanneauPrincipaleEst);
        PanneauPrincipaleEst.setLayout(PanneauPrincipaleEstLayout);
        PanneauPrincipaleEstLayout.setHorizontalGroup(
            PanneauPrincipaleEstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanneauPrincipaleEstLayout.setVerticalGroup(
            PanneauPrincipaleEstLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );

        PanneauPrincipale.add(PanneauPrincipaleEst, java.awt.BorderLayout.LINE_END);

        PanneauPrincipaleSud.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanneauPrincipaleSudLayout = new javax.swing.GroupLayout(PanneauPrincipaleSud);
        PanneauPrincipaleSud.setLayout(PanneauPrincipaleSudLayout);
        PanneauPrincipaleSudLayout.setHorizontalGroup(
            PanneauPrincipaleSudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1182, Short.MAX_VALUE)
        );
        PanneauPrincipaleSudLayout.setVerticalGroup(
            PanneauPrincipaleSudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        PanneauPrincipale.add(PanneauPrincipaleSud, java.awt.BorderLayout.PAGE_END);

        PanneauPrincipaleCentral.setBackground(new java.awt.Color(255, 255, 255));
        PanneauPrincipaleCentral.setLayout(new java.awt.BorderLayout());

        Bienvenue.setFont(new java.awt.Font("Segoe Script", 0, 80)); // NOI18N
        Bienvenue.setForeground(new java.awt.Color(4, 66, 114));
        Bienvenue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bienvenue.setText("Bienvenue");
        PanneauPrincipaleCentral.add(Bienvenue, java.awt.BorderLayout.NORTH);

        PanneauPrincipale.add(PanneauPrincipaleCentral, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanneauPrincipale, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BoutonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRechercherActionPerformed
        // -------------------- On récupère la liste des patients qui correspondent à la recherche ---------------------
        // On récupère les champs de la recherche dans une HashMap
        HashMap<String, String> dataPatient = new HashMap<>();
        // Pour chaque component, on vérifie si c'est un JTextField, si c'est le cas, on ajoute le contenu du JTextField dans la HashMap
        for (Component component : PanneauRecherche.getComponents()) {
            if (component instanceof JTextField) {
                JTextField textField = (JTextField) component;
                if (!textField.getText().isEmpty()) { // On vérifie que le JTextField ne soit pas vide
                    dataPatient.put(textField.getName(), textField.getText());
                }
            }
        }
        if (utilisateur.isPersonnelMedical()) {
            // On ne veut que les patients du service de l'utilisateur si c'est un personnel médical
            dataPatient.put("idService", Integer.toString(utilisateur.getIdService()));
            dataPatient.put("DossierVisible", "Y");
        }

        //On récupère les patients qui correspondent à la recherche
        ResultSet resultSetPatients = dialogueBD.getPatients(dataPatient);

        this.scrollPaneTable = new AfficherListePatients(resultSetPatients, this.utilisateur.getLangue());
        this.scrollPaneTable.addPatientSelectedListener(this);

        // ---------------- On affiche la liste des patients qui correspondent à la recherche -----------------------
        //On supprime tous les composants du panneau principal
        for (Component component : PanneauPrincipale.getComponents()) {
            PanneauPrincipale.remove(component);
        }
        //On ajoute le JScrollPane au panneau principal
        PanneauPrincipale.add(scrollPaneTable, java.awt.BorderLayout.CENTER);
        //On actualise le panneau principal
        PanneauPrincipale.revalidate();
    }//GEN-LAST:event_BoutonRechercherActionPerformed

    private void texteNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texteNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texteNomActionPerformed

    private void BoutonPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonPatientsActionPerformed
        //On crée un modèle de table
        DefaultTableModel modelTable = new DefaultTableModel();
        //On ajoute les colonnes de la table
        modelTable.addColumn("IPP");
        modelTable.addColumn("Nom");
        modelTable.addColumn("Prénom");
        modelTable.addColumn("Date de Naissance");

        //On s'assure que le tableau soit créé
        System.out.println("tableau est créé");

        //Un radiologue souhaite affiche les patients dont un acte de radiologie a été demandé
        //On vérifie que l'utilisateur est bien un radiologue (l'id du service de Radiologie est 15)
        if (this.utilisateur.getIdService() == 15) {
            modelTable.addColumn("Acte Radiologie");
            modelTable.addColumn("Date de demande");
            ResultSet resultat = null;
            //On recherche les actes qui appartiennent au domaine de radiologie
            String[] typesActes1 = {"Radiographie", "Echographie", "Scanner", "IRM", "Tomographie", "Scintigraphie"};
            try {
                //Pour chaque type d'acte, on récupère les résultats et on applique le traitement correspondant
                for (String typeActe : typesActes1) {
                    resultat = dialogueBD.rechercheTable("Acte", new HashMap<String, String>() {
                        {
                            put("nom", typeActe);
                        }
                    }, false);

                    //Tant qu'il existe un acte de Radiologie on récupère l'id du séjour correspondant
                    while (resultat.next()) {
                        String typeActe2;
                        typeActe2 = resultat.getString("nom").trim();
                        if (typeActe2.equals("Radiographie") || typeActe2.equals("Echographie") || typeActe2.equals("Scanner") || typeActe2.equals("IRM") || typeActe2.equals("Tomographie") || typeActe2.equals("Scintigraphie")) {
                            System.out.println("Il existe un acte de radiologie");
                            int idSejour = resultat.getInt("idsejour");
                            //On récupère le type d'acte de radiologie
                            String acte = typeActe2;
                            //On récupère la date de la demande de l'acte
                            String date = resultat.getString("dateRealisationActe");

                            //On fait une recherche pour récupérer l'information sur l'ouverture du séjour
                            HashMap<String, String> conditions = new HashMap<>();
                            conditions.put("idsejour", String.valueOf(idSejour));
                            ResultSet resultatSejour = dialogueBD.rechercheTable("Sejour", conditions, true);

                            if (resultatSejour.next()) {
                                System.out.println("Il existe un séjour correspondant");
                                // Récupération de la valeur de l'attribut "ouvert"
                                String ouvert = resultatSejour.getString("OUVERT");

                                //Si le séjour est ouvert, on récupère les informations du patient
                                if (ouvert.equals("Y")) {
                                    System.out.println("séjourt ouvert");
                                    int idPatient = resultatSejour.getInt("idpatient");
                                    String nomPatient = "";
                                    String prenomPatient = "";
                                    String dateNaissance = "";

                                    HashMap<String, String> conditionsPatient = new HashMap<>();
                                    conditionsPatient.put("idpatient", String.valueOf(idPatient));
                                    ResultSet resultatPatient = dialogueBD.rechercheTable("Patient", conditionsPatient, true);
                                    try {
                                        if (resultatPatient.next()) {
                                            System.out.println("Patient trouvé");
                                            nomPatient = resultatPatient.getString("nom").trim();
                                            prenomPatient = resultatPatient.getString("prenom").trim();
                                            dateNaissance = resultatPatient.getString("dateNaissance").substring(0, 10);
                                            modelTable.addRow(new Object[]{idPatient, nomPatient, prenomPatient, dateNaissance.substring(0, 10), acte, date});
                                            System.out.println("ligne ajoutée");
                                        }
                                    } catch (SQLException e) {
                                        throw new RuntimeException(e);
                                    }

                                } else {
                                    System.out.println("Le séjour est fermé");
                                }

                            }

                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //Un anesthésiste souhaite afficher
        if (this.utilisateur.getIdService() == 18) {

            modelTable.addColumn("Opération prévue le");
            ResultSet resultat = null;
            try {
                resultat = dialogueBD.rechercheTable("Acte", new HashMap<String, String>() {
                    {
                        put("nom", "Anesthésie");
                    }
                }, false);
                //Tant qu'il existe un acte de demande d'anesthésie, on récupère l'id du séjour correspondant
                while (resultat.next()) {
                    String typeActe3;
                    typeActe3 = resultat.getString("nom").trim();
                    System.out.println("Il existe un acte de radiologie");
                    //On récupère la valeur de idSejour
                    int idSejour = resultat.getInt("idsejour");
                    //On récupère la valeur de nom
                    String idService = resultat.getString("nom");
                    //On récupère la date de la demande de l'acte
                    String date = resultat.getString("dateRealisationActe").substring(0, 10);

                    //On fait une recherche pour récupérer l'information sur l'ouverture du séjour
                    HashMap<String, String> conditions = new HashMap<>();
                    conditions.put("idsejour", String.valueOf(idSejour));
                    ResultSet resultatSejour = dialogueBD.rechercheTable("Sejour", conditions, true);

                    if (resultatSejour.next()) {
                        System.out.println("Il existe un séjour correspondant");
                        // Récupération de la valeur de l'attribut "ouvert"
                        String ouvert = resultatSejour.getString("OUVERT");

                        //Si le séjour est ouvert, on récupère les informations du patient
                        if (ouvert.equals("Y")) {
                            System.out.println("séjourt ouvert");
                            int idPatient = resultatSejour.getInt("idpatient");
                            String nomPatient = "";
                            String prenomPatient = "";
                            String dateNaissance = "";
                            HashMap<String, String> conditionsPatient = new HashMap<>();
                            conditionsPatient.put("idpatient", String.valueOf(idPatient));
                            ResultSet resultatPatient = dialogueBD.rechercheTable("Patient", conditionsPatient, true);

                            try {
                                if (resultatPatient.next()) {
                                    System.out.println("Patient trouvé");
                                    nomPatient = resultatPatient.getString("nom").trim();
                                    prenomPatient = resultatPatient.getString("prenom").trim();
                                    dateNaissance = resultatPatient.getString("dateNaissance").substring(0, 10);
                                    modelTable.addRow(new Object[]{idPatient, nomPatient, prenomPatient, dateNaissance, date});
                                    System.out.println("ligne ajoutée");
                                }

                            } catch (SQLException ex) {
                                Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //On crée une JTable avec le modèle de table
        this.tablePatients = new JTable(modelTable);
        System.out.println("tableau créé et ajouté");
        //On ajoute un listener pour pouvoir cliquer sur la ligne du patient
        tablePatients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePatientsMouseClicked(evt);
            }
        });

        //On définit la taille de la police de la JTable
        tablePatients.setFont(new java.awt.Font("Times New Roman", 0, 24));
        tablePatients.setRowHeight(30);
        tablePatients.getTableHeader().setPreferredSize(new Dimension(100, 50));
        tablePatients.getTableHeader().setFont(new java.awt.Font("Times New Roman", 1, 24));

        // On change la couleur de fond de l'entête de la JTable
        tablePatients.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setBackground(new Color(4, 66, 114));
                setForeground(Color.WHITE);
                return this;
            }
        });
        // On empêche l'utilisateur de modifier les données de la JTable
        tablePatients.setDefaultEditor(Object.class, null);
        // On définit un modèle de sélection de la JTable à un seul Patient
        tablePatients.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //On ajoute la JTable dans un JScrollPane
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.add(tablePatients);
        System.out.println("Table ajouté dans un JScrollPane");

        // On change la couleur de fond des lignes de la JTable
        tablePatients.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (row % 2 == 0) {
                    c.setBackground(new java.awt.Color(236, 242, 254));
                } else {
                    c.setBackground(new java.awt.Color(244, 247, 254));
                }
                if (isSelected) {
                    // En gris si la ligne est sélectionnée.
                    c.setBackground(new java.awt.Color(50, 115, 244));
                }
                return c;

            }
        });
        jScrollPane1.setViewportView(tablePatients);
        //On supprime tous les composants du panneau principal
        for (Component component : PanneauPrincipale.getComponents()) {
            PanneauPrincipale.remove(component);
        }
        PanneauPrincipale.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        PanneauPrincipale.revalidate();
        // On change la couleur de fond de la JTable et du JScrollPane
        tablePatients.setBackground(new Color(236, 242, 254));
        this.setBackground(new Color(236, 242, 254));
        JViewport viewport = jScrollPane1.getViewport();
        if (viewport != null && viewport.getView() instanceof JComponent) {
            ((JComponent) viewport.getView()).setBackground(new Color(236, 242, 254));
            System.out.println("couleur de fond changée");
        } else {
            System.out.println("couleur de fond PAS changée");
        }

    }//GEN-LAST:event_BoutonPatientsActionPerformed

    private void DeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeconnexionActionPerformed
        System.out.println("veut se fermer");
        this.dispose();
        new InterfaceConnexion(new DialogueBD()).setVisible(true);
    }//GEN-LAST:event_DeconnexionActionPerformed

    private void tablePatientsMouseClicked(MouseEvent evt) {
        if (evt.getClickCount() == 2) {    // Si l'utilisateur double clique sur une ligne de la JTable
            int selectedRow = tablePatients.getSelectedRow(); // On récupère la ligne sélectionnée
            if (selectedRow != -1) {        // Si une ligne est bien sélectionnée
                // On récupère l'IPP du patient sélectionné
                Object idPatient = tablePatients.getValueAt(selectedRow, 0);
                System.out.println("Selected: " + idPatient);

                this.patientSelected("" + idPatient);

            }
        }
    }

    public void addPatientSelectedListener(AfficherListePatientsListener listener) {
        patientSelectioneListenerList.add(listener);
    }
    private void BoutonRechercheCliniqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRechercheCliniqueActionPerformed
        //On supprime tous les composants du panneau principal
        for (Component component : PanneauPrincipale.getComponents()) {
            PanneauPrincipale.remove(component);
        }
        //On ajoute le JScrollPane au panneau principal
        AffichageListeEtude listeEtude = new AffichageListeEtude(dialogueBD, utilisateur);
        PanneauPrincipale.add(listeEtude, java.awt.BorderLayout.CENTER);
        listeEtude.addEtudeSelectedListener(this);
        //On actualise le panneau principal
        PanneauPrincipale.revalidate();
    }//GEN-LAST:event_BoutonRechercheCliniqueActionPerformed

    private void boutonNouveauPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonNouveauPatientActionPerformed
        // On crée un nouveau JFrame pour ajouter un patient
        AjoutPatient ajoutPatient = new AjoutPatient(dialogueBD, utilisateur.getLangue());
        // On affiche le JFrame
        ajoutPatient.setVisible(true);
    }//GEN-LAST:event_boutonNouveauPatientActionPerformed

    /**
     * Méthode appelée lorsqu'un patient est sélectionné dans la liste des
     * patients
     *
     * @param idPatient : l'identifiant du patient sélectionné
     */
    public void patientSelected(String idPatient) {
        if (utilisateur.isPersonnelMedical()) { // Si l'utilisateur est un personnel médical
            // On enlève le panel actuel du panneau principal central
            // On crée un nouveau panel pour afficher les informations du patient
            AffichagePatient affichagePatient = new AffichagePatient(idPatient, utilisateur, dialogueBD);
            //On supprime tous les composants du panneau principal
            for (Component component : PanneauPrincipale.getComponents()) {
                PanneauPrincipale.remove(component);
            }
            // On ajoute le nouveau panel au panneau principal central
            PanneauPrincipale.add(affichagePatient, BorderLayout.CENTER);
            // On actualise le panneau principal central
            PanneauPrincipale.revalidate();
            PanneauPrincipale.repaint();
        } else { // Si l'utilisateur est un personnel administratif, on lui permet d'ouvrir un séjour
            // TODO : Ouvrir un séjour
            // On crée un nouveau JFrame pour ouvrir un séjour
            AjoutSejour ajoutSejour = new AjoutSejour(dialogueBD, utilisateur, idPatient);
            // On affiche le JFrame
            ajoutSejour.setVisible(true);
        }
    }

    private void BoutonMedecinsActionPerformed(java.awt.event.ActionEvent evt){
        try {
            //On crée un modèle de table
            DefaultTableModel modelTable = new DefaultTableModel();
            //On ajoute les colonnes de la table
            modelTable.addColumn("Service");
            modelTable.addColumn("Nom");
            modelTable.addColumn("Prénom");
            
            //On fait une recherche pour récupérer les informations des médecins
            HashMap<String, String> conditionMed = new HashMap<>();
            conditionMed.put("idpersonnelmedical", "1111");
            ResultSet resultatMedecin = dialogueBD.rechercheTable("PersonnelMedical", conditionMed, true);
            
            while (resultatMedecin.next()) {
                String nom = resultatMedecin.getString("nom");
                String prenom = resultatMedecin.getString("prenom");
                int idService = resultatMedecin.getInt("idservice");
                String service = dialogueBD.getService(idService);
                modelTable.addRow(new Object[]{service, nom, prenom});
            }
            
            //On fait une recherche pour récupérer les informations des radiologues
            HashMap<String, String> conditionRadiologue = new HashMap<>();
            conditionRadiologue.put("idpersonnelmedical", "3333");
            ResultSet resultatRadiologue = dialogueBD.rechercheTable("PersonnelMedical", conditionRadiologue, true);
            
            while (resultatRadiologue.next()) {
                String nom = resultatRadiologue.getString("nom");
                String prenom = resultatRadiologue.getString("prenom");
                modelTable.addRow(new Object[]{"Radiologie", nom, prenom});
            }
            
            //On fait une recherche pour récupérer les informations des anesthésistes
            HashMap<String, String> conditionAnesthesiste = new HashMap<>();
            conditionAnesthesiste.put("idpersonnelmedical", "4444");
            ResultSet resultatAnesthesiste = dialogueBD.rechercheTable("PersonnelMedical", conditionAnesthesiste, true);
            
            while (resultatAnesthesiste.next()) {
                String nom = resultatAnesthesiste.getString("nom");
                String prenom = resultatAnesthesiste.getString("prenom");
                modelTable.addRow(new Object[]{"Anesthésie", nom, prenom});
            }
            
            this.tableMedecin = new JTable(modelTable);
            //On définit la taille de la police de la JTable
            tableMedecin.setFont(new java.awt.Font("Times New Roman", 0, 24));
            tableMedecin.setRowHeight(30);
            tableMedecin.getTableHeader().setPreferredSize(new Dimension(100, 50));
            tableMedecin.getTableHeader().setFont(new java.awt.Font("Times New Roman", 1, 24));
            
            // On change la couleur de fond de l'entête de la JTable
            tableMedecin.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    setBackground(new Color(4, 66, 114));
                    setForeground(Color.WHITE);
                    return this;
                }
            });
            // On empêche l'utilisateur de modifier les données de la JTable
            tableMedecin.setDefaultEditor(Object.class, null);
            // On définit un modèle de sélection de la JTable à un seul Patient
            tableMedecin.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            
            //On ajoute la JTable dans un JScrollPane
            jScrollPane2 = new javax.swing.JScrollPane();
            jScrollPane2.add(tableMedecin);
            System.out.println("Table ajouté dans un JScrollPane");
            
            // On change la couleur de fond des lignes de la JTable
            tableMedecin.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    if (row % 2 == 0) {
                        c.setBackground(new java.awt.Color(236, 242, 254));
                    } else {
                        c.setBackground(new java.awt.Color(244, 247, 254));
                    }
                    if (isSelected) {
                        // En gris si la ligne est sélectionnée.
                        c.setBackground(new java.awt.Color(50, 115, 244));
                    }
                    return c;
                    
                }
            });
            jScrollPane2.setViewportView(tableMedecin);
            //On supprime tous les composants du panneau principal
            for (Component component : PanneauPrincipale.getComponents()) {
                PanneauPrincipale.remove(component);
            }
            PanneauPrincipale.add(jScrollPane2, java.awt.BorderLayout.CENTER);
            PanneauPrincipale.revalidate();
            // On change la couleur de fond de la JTable et du JScrollPane
            tableMedecin.setBackground(new Color(236, 242, 254));
            this.setBackground(new Color(236, 242, 254));
            JViewport viewport = jScrollPane2.getViewport();
            if (viewport != null && viewport.getView() instanceof JComponent) {
                ((JComponent) viewport.getView()).setBackground(new Color(236, 242, 254));
                System.out.println("couleur de fond changée");
            } else {
                System.out.println("couleur de fond PAS changée");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Accueil.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void etudeSelected(String idEtude) {
        // On crée un nouveau panel pour afficher les informations du patient
        AffichageEtude affichageEtude = new AffichageEtude(idEtude, dialogueBD, utilisateur);
        affichageEtude.addpatientSelectedListener(this);
        //On supprime tous les composants du panneau principal
        for (Component component : PanneauPrincipale.getComponents()) {
            PanneauPrincipale.remove(component);
        }
        // On ajoute le nouveau panel au panneau principal central
        PanneauPrincipale.add(affichageEtude, BorderLayout.CENTER);
        // On actualise le panneau principal central
        PanneauPrincipale.revalidate();
        PanneauPrincipale.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            final Utilisateur utilisateur = new Utilisateur("Cot", "Harry", true, "Français", 1, 1111, "Y");
            final DialogueBD dialogueBD = new DialogueBD();

            {
                dialogueBD.connect();
            }

            public void run() {
                new Accueil(dialogueBD, utilisateur).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bienvenue;
    private javax.swing.JButton BoutonMedecins;
    private javax.swing.JButton BoutonPatients;
    private javax.swing.JButton BoutonRechercheClinique;
    private javax.swing.JButton BoutonRechercher;
    private javax.swing.JButton BoutonServices;
    private javax.swing.JLabel DateDeNaissance;
    private javax.swing.JButton Deconnexion;
    private javax.swing.JLabel IPP;
    private javax.swing.JLabel Nom;
    private javax.swing.JPanel PanneauLogo;
    private javax.swing.JPanel PanneauNord;
    private javax.swing.JPanel PanneauOuest;
    private javax.swing.JPanel PanneauPrincipalOuest;
    private javax.swing.JPanel PanneauPrincipale;
    private javax.swing.JPanel PanneauPrincipaleCentral;
    private javax.swing.JPanel PanneauPrincipaleEst;
    private javax.swing.JPanel PanneauPrincipaleNord;
    private javax.swing.JPanel PanneauPrincipaleSud;
    private javax.swing.JPanel PanneauRecherche;
    private javax.swing.JLabel Prenom;
    private javax.swing.JLabel RechercherUnPatient;
    private javax.swing.JButton boutonNouveauPatient;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JPanel panelBoutons;
    private javax.swing.JTextField texteDateNaissance;
    private javax.swing.JTextField texteIPP;
    private javax.swing.JTextField texteNom;
    private javax.swing.JTextField textePrenom;
    // End of variables declaration//GEN-END:variables
}
